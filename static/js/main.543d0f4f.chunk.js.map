{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","startSilters","query","status","filters","value","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","useState","renderTodos","setrenderTodos","useEffect","title","toLowerCase","includes","completed","setCurrentTodo","useCallback","currentActions","length","className","map","id","classNames","onClick","TodoFilter","queryInput","setqueryInput","editStatus","filterAtions","editQuery","onSubmit","event","preventDefault","onChange","e","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","user","setuser","userId","selectUser","removeCurrentTodo","href","email","name","App","todoList","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.543d0f4f.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","// export type Status = 'all' | 'active' | 'completed';\ntype Filters = {\n  query: string,\n  status: string,\n};\n\ntype StatusAction = {\n  type: 'filters/Status'\n  query: string,\n  status: string\n};\n\ntype QueryAction = {\n  type: 'filters/Query'\n  query: string,\n  status: string\n};\n\nconst editQuery = (filters: Filters, value: string): QueryAction => ({\n  ...filters,\n  type: 'filters/Query',\n  query: value,\n});\n\nconst editStatus = (filters: Filters, value: string): StatusAction => ({\n  ...filters,\n  type: 'filters/Status',\n  status: value,\n});\n\ntype Actions = StatusAction | QueryAction;\n\nconst startSilters: Filters = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (filters: Filters = startSilters, actions: Actions) => {\n  switch (actions.type) {\n    case 'filters/Query':\n      return {\n        ...filters,\n        query: actions.query,\n      };\n\n    case 'filters/Status':\n      return {\n        ...filters,\n        status: actions.status,\n      };\n\n    default:\n      return filters;\n  }\n};\n\nexport const actions = { editQuery, editStatus };\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodos = { type: 'todos/Set', todos: Todo[] };\ntype ErrorSetTodos = { type: 'todos/Error' };\ntype Actions = SetTodos | ErrorSetTodos;\n\nconst setTodos = (todos: Todo[]): SetTodos => ({ type: 'todos/Set', todos });\nconst errorSetTodos = (): ErrorSetTodos => ({ type: 'todos/Error' });\n\nconst todosReducer = (todos: Todo[] = [], action: Actions): Todo[] => {\n  switch (action.type) {\n    case 'todos/Set':\n      return action.todos;\n\n    case 'todos/Error':\n      return [];\n\n    default:\n      return todos;\n  }\n};\n\nexport const actions = { setTodos, errorSetTodos };\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentActions } from '../../features/currentTodo';\n\nexport const TodoList: React.FC = () => {\n  const todos: Todo[] = useAppSelector(state => state.todos);\n  const { query, status } = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n\n  const [renderTodos, setrenderTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    setrenderTodos(todos\n      .filter(todo => {\n        if (todo.title.toLowerCase().includes(query.toLowerCase())) {\n          switch (status) {\n            case 'all':\n              return true;\n\n            case 'active':\n              return !todo.completed;\n\n            case 'completed':\n              return todo.completed;\n\n            default:\n              return true;\n          }\n        }\n\n        return false;\n      }));\n  }, [query, status]);\n\n  useEffect(() => {\n    setrenderTodos(todos);\n  }, [todos]);\n\n  const setCurrentTodo = useCallback((todo) => dispatch(currentActions.setTodo(todo)), []);\n\n  return (\n    <>\n      {renderTodos.length > 0\n        ? (\n          <table className=\"table is-narrow is-fullwidth\">\n            <thead>\n              <tr>\n                <th>#</th>\n\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {renderTodos.map(todo => {\n                return (\n                  <tr data-cy=\"todo\" key={todo.id}>\n                    <td className=\"is-vcentered\">{todo.id}</td>\n                    <td className=\"is-vcentered\">\n                      {todo.completed\n                        ? (\n                          <span className=\"icon\" data-cy=\"iconCompleted\"><i className=\"fas fa-check\" /></span>\n                        )\n                        : null}\n                    </td>\n\n                    <td className=\"is-vcentered is-expanded\">\n                      <p\n                        className={classNames(\n                          todo.completed ? 'has-text-success' : 'has-text-danger',\n                        )}\n                      >\n                        {todo.title}\n                      </p>\n                    </td>\n\n                    <td className=\"has-text-right is-vcentered\">\n                      <button\n                        data-cy=\"selectButton\"\n                        className=\"button\"\n                        type=\"button\"\n                        onClick={() => {\n                          setCurrentTodo(todo);\n                        }}\n                      >\n                        <span className=\"icon\">\n                          <i className=\"far fa-eye\" />\n                        </span>\n                      </button>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        ) : (\n          <p className=\"notification is-warning\">\n            There are no todos matching current filter criteria\n          </p>\n        )}\n    </>\n  );\n};\n","import React, { useCallback, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions as filterAtions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useDispatch();\n  const filters = useAppSelector(state => state.filter);\n\n  const [queryInput, setqueryInput] = useState('');\n\n  const editStatus = useCallback((value) => {\n    dispatch(filterAtions.editStatus(filters, value));\n  }, []);\n\n  const editQuery = useCallback((value) => {\n    dispatch(filterAtions.editQuery(filters, value));\n  }, []);\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(e) => {\n              editStatus(e.target.value);\n            }}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={queryInput}\n          onChange={(e) => {\n            editQuery(e.target.value);\n            setqueryInput(e.target.value);\n          }}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => {\n              dispatch(filterAtions.editQuery(filters, ''));\n              setqueryInput('');\n            }}\n          />\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\nimport { actions as currentActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todo: Todo | null = useAppSelector(state => state.currentTodo);\n  const [user, setuser] = useState<User>();\n\n  useEffect(() => {\n    if (todo) {\n      getUser(todo.userId)\n        .then((selectUser: User) => setuser(selectUser));\n    }\n  }, []);\n\n  const removeCurrentTodo = useCallback(() => {\n    dispatch(currentActions.removeTodo());\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {user ? (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {todo?.id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => removeCurrentTodo()}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{todo?.title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo?.completed\n                ? (\n                  <strong className=\"has-text-success\">Done</strong>\n                ) : (\n                  <strong className=\"has-text-danger\">Planned</strong>\n                )}\n              {' by '}\n              <a href={`mailto:${user.email}`}>{user.name}</a>\n            </p>\n          </div>\n        </div>\n      ) : (<Loader />)}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { actions as todosActions } from './features/todos';\nimport { TodoModal } from './components/TodoModal';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos: Todo[] = useAppSelector(state => state.todos);\n  const currentTodo: Todo | null = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    getTodos().then((todoList: Todo[]) => dispatch(todosActions.setTodos(todoList)));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          {todos.length > 0 ? (\n            <div className=\"box\">\n              <h1 className=\"title\">Todos:</h1>\n\n              <div className=\"block\">\n                <TodoFilter />\n              </div>\n\n              <div className=\"block\">\n                <TodoList />\n              </div>\n            </div>\n          ) : <Loader />}\n        </div>\n      </div>\n\n      {currentTodo ? <TodoModal /> : null}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}